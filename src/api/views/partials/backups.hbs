<section class="flex-1 hidden border-solid border-2 border-gray-400 rounded-lg p-3" id="backups">
  <div class="flex gap-2 items-center">
    <h2 class="mb-2 text-xl font-semibold">{{dbSchedule.name}}</h2>
    <a href="/dbschedule/{{dbSchedule.id}}" class="text-primary-foreground hover:underline text-sm blue-600">edit</a>
    <div class="flex-1"></div>
    {{> csrftokeninputdata }}
    <input type="hidden" name="_csrf" value="{{_csrf}}">
    <button onclick="deleteAllBackups('{{dbSchedule.id}}', this)"
      class="text-white bg-gradient-to-r from-red-400 via-red-500 to-red-600 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-red-300 dark:focus:ring-red-800 shadow-lg shadow-red-500/50 dark:shadow-lg dark:shadow-red-800/80 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2 flex gap-2 items-center"
      type="button" role="button">
      <svg class="w-6 h-6 text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24"
        fill="none" viewBox="0 0 24 24">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M5 7h14m-9 3v8m4-8v8M10 3h4a1 1 0 0 1 1 1v3H9V4a1 1 0 0 1 1-1ZM6 7h12v13a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7Z" />
      </svg> Delete all backups
    </button>
  </div>

  <p class="text-muted-foreground text-sm mb-4">
    Saving backups to <a href="/bucket/{{bucket.id}}"
      class="inline-flex items-center text-blue-600 dark:text-blue-500 hover:underline font-bold">
      {{bucket.name}}
    </a>
    <span class="text-lg">each {{secondsToTime dbSchedule.backupIntervalSeconds}}</span>, <span
      class="text-lg">retaining</span> backups <span class="text-lg">for {{secondsToTime
      dbSchedule.backupRetentionSeconds}}.</span>
    (~{{round 2 (divide dbSchedule.backupRetentionSeconds dbSchedule.backupIntervalSeconds)}} backups at a time)
  </p>

  <p>
    {{backups.length}} backups found
  </p>

  <div class="relative w-full overflow-auto">
    <table class="w-full caption-bottom text-sm">
      <thead class="[&amp;_tr]:border-b">
        <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
          <th
            class="h-12 px-4 text-center align-middle font-medium text-muted-foreground [&amp;:has([role=checkbox])]:pr-0 w-[100px]">
            id
          </th>
          <th
            class="h-12 px-4 text-center align-middle font-medium text-muted-foreground [&amp;:has([role=checkbox])]:pr-0">
            Status
          </th>
          <th
            class="h-12 px-4 text-center align-middle font-medium text-muted-foreground [&amp;:has([role=checkbox])]:pr-0">
            Size
          </th>
          <th
            class="h-12 px-4 text-center align-middle font-medium text-muted-foreground [&amp;:has([role=checkbox])]:pr-0">
            doneAt
          </th>
          <th
            class="h-12 px-4 text-center align-middle font-medium text-muted-foreground [&amp;:has([role=checkbox])]:pr-0">
            deleteAt
          </th>
          <th
            class="h-12 px-4 text-center align-middle font-medium text-muted-foreground [&amp;:has([role=checkbox])]:pr-0">
            Full URI
          </th>
          <th
            class="h-12 px-4 text-center align-middle font-medium text-muted-foreground [&amp;:has([role=checkbox])]:pr-0 {{#ifEquals backup.status 'completed'}}{{else}}hidden{{/ifEquals}}">

          </th>
          <th
            class="h-12 px-4 text-center align-middle font-medium text-muted-foreground [&amp;:has([role=checkbox])]:pr-0 {{#ifEquals backup.status 'completed'}}{{else}}hidden{{/ifEquals}}">
          </th>
        </tr>
      </thead>
      <tbody class="[&amp;_tr:last-child]:border-0">
        {{#each backups as |backup|}}
        {{#ifEquals backup.status 'failed'}}
        <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
          <!-- a td for all columns -->
          <td class="p-4 align-middle [&amp;:has([role=checkbox])]:pr-0">
            {{backup.id}}
          </td>
          <td class="p-4 align-middle [&amp;:has([role=checkbox])]:pr-0">
            <img class="w-6 h-6 mx-auto" src="/images/statuses/{{backup.status}}.png" alt="{{backup.status}}">
          </td>
          <td colspan="5">
            <div
              class="mt-3 flex items-center p-4 mb-4 text-sm text-red-800 border border-red-300 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400 dark:border-red-800"
              role="alert">
              <svg class="flex-shrink-0 inline w-4 h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                fill="currentColor" viewBox="0 0 20 20">
                <path
                  d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
              </svg>
              <span class="sr-only">Info</span>
              <div>
                <span class="message" data-tail="100">{{tail backup.message 100}}</span>
                {{#if (gt (length backup.message) 100)}}
                <button onclick="expand(this)" data-message="{{backup.message}}"
                  class="text-blue-600 hover:underline">more</button>
                {{/if}}
              </div>
            </div>
          </td>
          <td class="p-4 align-middle [&amp;:has([role=checkbox])]:pr-0">
            <button onclick="deleteBackup('{{backup.id}}', this)"
              class="text-white bg-gradient-to-r from-red-400 via-red-500 to-red-600 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-red-300 dark:focus:ring-red-800 shadow-lg shadow-red-500/50 dark:shadow-lg dark:shadow-red-800/80 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2 flex flex-col items-center">
              <svg class="w-6 h-6 text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24"
                height="24" fill="none" viewBox="0 0 24 24">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M5 7h14m-9 3v8m4-8v8M10 3h4a1 1 0 0 1 1 1v3H9V4a1 1 0 0 1 1-1ZM6 7h12v13a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7Z" />
              </svg><span>Delete</span>
            </button>
          </td>
        </tr>
        {{else}}
        <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
          <td class="p-4 align-middle [&amp;:has([role=checkbox])]:pr-0">{{backup.id}}</td>
          <td class="p-4 align-middle [&amp;:has([role=checkbox])]:pr-0">
            <img class="w-6 h-6 mx-auto" src="/images/statuses/{{backup.status}}.png" alt="{{backup.status}}">
          </td>
          <td class="p-4 align-middle [&amp;:has([role=checkbox])]:pr-0">{{bytesToSize backup.size}}</td>
          <td class="text-center p-4 align-middle [&amp;:has([role=checkbox])]:pr-0">
            <p>{{timeLeft backup.doneAt}}</p>
            <p>({{date backup.doneAt}})</p>
          </td>
          <td class="text-center p-4 align-middle [&amp;:has([role=checkbox])]:pr-0">
            <p>{{timeLeft backup.deleteAt}}</p>
            <p>({{date backup.deleteAt}})</p>
          </td>
          <td class="p-4 align-middle [&amp;:has([role=checkbox])]:pr-0">
            <a href="/bucket/{{ backup.bucket.id }}"
              class="text-primary-foreground hover:underline text-sm blue-600">{{backup.bucket.bucketName
              }}</a>/{{backup.uri}}
          </td>
          <td class="p-4 align-middle [&amp;:has([role=checkbox])]:pr-0">
            <button onclick='downloadBackup({{{json backup.bucket}}}, {{{json backup}}})'
              class="text-white bg-gradient-to-r from-purple-500 via-purple-600 to-purple-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-purple-300 dark:focus:ring-purple-800 shadow-lg shadow-purple-500/50 dark:shadow-lg dark:shadow-purple-800/80 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2 flex flex-col items-center {{#ifEquals backup.status 'completed'}}{{else}}hidden{{/ifEquals}}">
              <svg class="w-6 h-6" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                fill="currentColor" viewBox="0 0 24 24">
                <path fill-rule="evenodd"
                  d="M13 11.15V4a1 1 0 1 0-2 0v7.15L8.78 8.374a1 1 0 1 0-1.56 1.25l4 5a1 1 0 0 0 1.56 0l4-5a1 1 0 1 0-1.56-1.25L13 11.15Z"
                  clip-rule="evenodd" />
                <path fill-rule="evenodd"
                  d="M9.657 15.874 7.358 13H5a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-2.358l-2.3 2.874a3 3 0 0 1-4.685 0ZM17 16a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H17Z"
                  clip-rule="evenodd" />
              </svg>
            </button>
          </td>
          <td class="p-4 align-middle [&amp;:has([role=checkbox])]:pr-0">
            <button onclick="deleteBackup('{{backup.id}}', this)"
              class="text-white bg-gradient-to-r from-red-400 via-red-500 to-red-600 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-red-300 dark:focus:ring-red-800 shadow-lg shadow-red-500/50 dark:shadow-lg dark:shadow-red-800/80 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2 flex flex-col items-center {{#ifEquals backup.status 'completed'}}{{else}}hidden{{/ifEquals}}">
              <svg class="w-6 h-6 text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24"
                height="24" fill="none" viewBox="0 0 24 24">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M5 7h14m-9 3v8m4-8v8M10 3h4a1 1 0 0 1 1 1v3H9V4a1 1 0 0 1 1-1ZM6 7h12v13a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7Z" />
              </svg>
            </button>
          </td>

        </tr>
        {{/ifEquals}}
        {{/each}}

      </tbody>
    </table>
  </div>
  <div id="backups-placeholder">
    <h2 class="text-xl font-semibold w-1/2">
      Select a database schedule to view backups or create a new backup declaration
    </h2>
  </div>

  <div class="flex items-center justify-center mt-4">
    <p class="text-muted-foreground text-sm"><button onclick="reload()">Reload</button> in <span
        id="reload-in-s">5</span>s</p>
  </div>
</section>


<script>
  const backups = {{{ json backups }}};

  const backupsTable = document.getElementById('backups');
  const backupsPlaceholder = document.getElementById('backups-placeholder');
  if (typeof backups !== 'undefined') {
    backupsTable.classList.remove('hidden');
    backupsPlaceholder.classList.add('hidden');
  }

  async function deleteBackup(id, el) {
    if (!(await ask('Are you sure?', 'Delete backup file ' + id + '?'))) {
      return;
    }

    await fetch(`/backup/${id}`, {
      method: 'DELETE',
      headers: {
        'x-csrf-token': document.querySelector('input[data-csrf-token]').getAttribute('data-csrf-token')
      },
      credentials: 'same-origin'
    });
    location.reload();
  }

  async function deleteAllBackups(dbScheduleId, el) {
    if (!(await ask('Are you sure?', 'Delete all backups for this schedule? ' + dbScheduleId))) {
      return;
    }

    await fetch(`/backups/${dbScheduleId}`, {
      method: 'DELETE',
      headers: {
        'x-csrf-token': document.querySelector('input[data-csrf-token]').getAttribute('data-csrf-token')
      },
      credentials: 'same-origin'
    });
    location.reload();

  }

  async function downloadBackup(bucket, backup) {
    if (!(await ask('Download?', `Download ${backup.size}B ?`))) {
      return;
    }

    window.open(backup.publicUrl, '_blank');
  }
</script>


<script>
  let reloadIn = 10;
  document.getElementById('reload-in-s').innerText = reloadIn;
  setInterval(() => {
    if (!document.getElementById('reload-in-s').checkVisibility()) return;
    reloadIn--;
    document.getElementById('reload-in-s').innerText = reloadIn;
    if (reloadIn === 0) {
      location.reload();
    }
  }, 1000);

  function reload() {
    location.reload();
  }
</script>

<script>
  function tail(str, n) {
    return str.substring(0, n);
  }

  function expand(el) {
    const message = el.getAttribute('data-message');

    if (el.textContent === 'less') {
      const howManyChars = Number(el.parentElement.querySelector('.message').getAttribute('data-tail'));
      el.parentElement.querySelector('.message').innerText = tail(message, howManyChars);
      el.textContent = 'more';
      return;
    }

    el.parentElement.querySelector('.message').innerText = message;
    el.textContent = 'less';
  }

</script>